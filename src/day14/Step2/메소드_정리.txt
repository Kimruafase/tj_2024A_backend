1. 일반 메소드
    > 일반적으로 클래스 안에서 선언해서 사용하는 메소드이다.
    > 유지보수나 재사용할 때, 코드 안에서 공통적으로 사용되는 부분이 있을 경우 묶어서 따로 빼서 사용한다.

2. 추상 메소드
    > 인터페이스 안에서 선언한다. {}가 없는 것이 특징이다.
    > 고로 인터페이스를 implement 하는 클래스에서 override 를 통해 재정의로 사용하는 것이 주 목적이다.

3. 디폴트 메소드
    > 인터페이스에서 각 클래스마다 특정 메소드가 같은 기능을 계속 반복할 경우 인터페이스에서 직접 디폴트 메소드를 선언함으로써 활용성을 높일 수 있다.
    > 추상 메소드와는 달리 인터페이스에서 메소드를 선언할 때 default 를 입력해줌으로써 구현 코드를 작성할 수 있다.
    > 만약 2개 이상의 메소드에서 같은 이름의 디폴트 메소드를 사용할 경우 객체를 생성해야 호출할 수 있기 때문에 오류가 발생한다. 고로 implement 한 클래스에서 override 가 필요하다.

4. 정적 메소드
    > 인터페이스에서 클래스를 생성하지 않아도 사용할 수 있게 만드는 메소드이다.
    > 추상 메소드와는 달리 메소드를 선언할 때 static 을 붙여줌으로써 구현코드를 작성할 수 있다.
    > 만약 2개 이상의 메소드에서 같은 이름의 정적 메소드를 선언해도 객체를 참조하지 않고 직접 인터페이스에서 호출할 수 있기 때문에 오류가 발생하지 않는다.

5. private 메소드
    > 기존에 구현된 코드를 변경하지 않고 인터페이스를 구현한 클래스에서 공통즈올 사용하는 경우에 private 메소드로 재사용성을 높일 수 있다.
    > static 예약어와 함께 사용할 수도 있다. (정적 메소드 안에서 호출하기 위함)