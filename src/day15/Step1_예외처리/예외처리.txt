예외처리
    > 오류 / 에러(ERROR) : 시스템이 종료되는 수준의 심각한 문제가 발생
        > 프로그램 개발자가 예측하여 방지가 힘들다. 주로 하드웨어(메모리, CPU) 관련

    > 예외(Exception)   : 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생
        > 오류와 달리 프로그램 개발자가 예측 가능하여 방지가 가능하다. 경험이 즁요하다.

예외 종류
    > 1. 일반 예외 : 컴파일러가 예외 처리 코드 여부를 검사하는 예외
        > 주로 외부 시스템과 연동 시 발생 ex_ 키보드(입,출력), 파일(윈도우)처리, 네트워크, JDBC(자바 - DB) 등등

    > 2. 실행 예외 : 컴파일러가 예외 처리 코드 여부를 검사하지 않는 예외
        > 실행 도중에 발생 : NullPointerException, 타입 관련 오류, 인덱스 등등
        > 개발자 경험의 의존성이 강하다. 꼼꼼한 성격이 필요.

예외 처리란?
    > 예외가 발생했을 때 다른 흐름으로 제어 -> 예외를 고치거나 코드를 수정하거나하는 작업이 아니다.
    > IF랑 비슷하면서 다르다.
    > 이유 : 예외 발생하면 빨강색으로 콘솔에 예외사유 나오면서 프로그램 강제 종료
        > 배포 시 사용자가 안전하게 24시간 사용하는 동안 예외가 발생하더라도 다른 흐름으로 제어해서 안전한 프로그램으로 완성하기 위해
        > 추후에 예외 관련해서 코드를 수정하거나 대안 방안
    > 문법
        > try{예외가 발생하거나 발생할 것 같은(예측) 코드}
        > catch(해당 예외 클래스명 객체변수명) {예외 발생했을 때의 코드}
          catch(해당 예외 클래스명 객체변수명) {예외 발생했을 때의 코드}   -> 다중 catch 시 여러 줄 작성 가능
          catch(해당 예외 클래스명 객체변수명) {예외 발생했을 때의 코드}   -> 다중 catch 시 여러 줄 작성 가능
          finally{예외가 있던 말던 실행되는 코드} -> 가독성을 높이기 위해, 주로 다른 연동 시스템과 해제하는 코드
    > 다중 catch 시 주의할 점
        > Exception 클래스를 맨 앞에 쓰지 말 것, 마지막에 작성

예외 클래스
    > 예외가 발생하면 JVM 에 예외 발생 사유가 저장되는 각 클래스의 객체 생성
    > 슈퍼 클래스 : Exception 클래스
        > ClassNotFoundException 클래스 : 해당 클래스를 못 찾았을 때 발생하는 예외를 관리하는 클래스
        > NullPointerException 클래스 : 해당 변수의 참조(주소)가 없는데 '.'(도트 / 접근) 연산자를 사용했을 때 문제를 관리하는 클래스
        > NumberFormatException 클래스 : 숫자형 타입변환을 할 수 없을 때 예외가 발생하는 클래스
        > ArrayIndexOutOfBoundsException 클래스 : 존재하지 않는 인덱스를 접근할 때 발생하는 클래스
        > InputMismatchException 클래스 : 입력 시 타입이 일치하지 않을 때 발생하는 예외 클래스
        > 등등

예외 던지기 / 떠넘기기
    > 여러 곳에서 발생하는 예외를 특정한 곳에서 한번에 처리하기 위해서
        > ex_ 쓰레기를 쓰레기장에 버리면 폐기물 차가 수거해서 특정한 폐기물 소각장 처리
        > 예외를 던지면 특정한 곳에서 예외를 처리

    > 반환타입 함수명( 매개변수 ) throws 예외클래스 {}

