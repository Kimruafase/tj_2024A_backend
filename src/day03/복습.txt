- 리터럴 : 'a', 1234, true, 3.14 등등 코드에 입력된 자료
- 변수 : 하나의 자료를 저장하는 메모리 공간
- 변수의 기본 자료형
    [논리]
        boolean     1byte           (true, false)
    [문자]
        char        2byte           유니코드, 한글자, ''
        -string     문자길이만큼할당   " "
    [정수]
        byte        1byte           -128 ~ 127
        short       2byte           +-3만 정도
        int         4byte           +-21억 정도     리터럴 기본타입
        long        8byte           +-21억 이상    , 리터럴 뒤에 L 붙이기
    [실수]
        float       4byte           소수점 8자리까지 표현    , 리터럴 뒤에 F 붙이기
        double      8byte           소수점 17자리까지 표현   . 리터럴 기본 실수 타입
        * 실수의 오차와 정수의 허용범위 외 자료 저장시에는 문자처리

    - 자료형 변환
        1. 자동형 / 자료형 변환
            방향 : byte -> short -> int -> long -> float -> double
            예제 : int i1 = byte 변수;
            연산시 형 변환 :
                - byte, short 자료형은 연산 시 int형으로 결과 반환
                - 그와 피연산자 중에 더 큰 자료형으로 결과 반환
                byte, short => int
                int, int    => int
                int, long   => long

        2. 강제형 / 자료형 변환 *
            방형 : byte <- short <- int <- long <- float <- double
            예제 : byte b1 = (byte)int변수;

- 연산자
    1. 산술 : + - * / %
    2. 연결 : +
    3. 비교 : > < >= <= == !=
    4. 관계 : && || !
    5. 증감 : ++ --
    6. 대입, 복합대입 : = += -= *= /= %=
    7. 삼항 : 조건 ? 참 : 거짓

- 출력 함수
    1. System.out.print()
        + 콘솔창 출력
        print( 리터럴 또는 호출변수명 또는 연산식 또는 호출함수명 )
    2. System.out.println()     sout + enter
        + 콘솔창 출력
        + 출력 후 줄바꿈 포함
    3. System.out.printf()      souf + enter
        + 콘솔창 출력
        + printf("형식 문자 포함한 문자열", 값1, 값2, 값3);

    - 제어 / escape 문자 : 기능이 포함된 특수문자
        \n : 줄바꿈, \t : 들여쓰기, \r : 개행, \\ : '\' 출력,  \" : '"' 출력, \' : "'" 출력

    - 형식 / format 문자 : 출력 시 형식에 맞추어 자료를 출력
        %d : 정수, %f : 실수, %s : 문자열, %c : 문자
        %자릿수d : 해당 자릿수만큼 자리 차지, 단 자료의 길이가 부족하면 공백으로 채움, 오른쪽 정렬
        %-자릿수d : 해당 자릿수만큼 자리 차지, 단 자료의 길이가 부족하면 공백으로 채움, 왼쪽 정렬
        %0자릿수d : 해당 자릿수만큼 자리 차지, 단 자료의 길이가 부족하면 0으로 채움, 오른쪽 정렬
        %자릿수.소숫점f : 소수점 개수만큼 소숫점 출력, 단 소수점은 자릿수 포함된 길이
